//! const variableName = require('path')
//! const variableName = require("moduleName")
const fs = require("fs");
// console.log(fs);

//! CRUD ON FILES IN SYNCHRONOUS(SYNC) WAY

//! 1) Creating a file
// method name ==> writeFileSync()
// syntax ==> fs.writeFileSync("filename/path", "data")
//? the first parameter is the path of the file and also the name
//? the second parameter is the data that we want to write
// you can give any extension of the file you want

// console.log("start");
// console.log("middle");
// fs.writeFileSync("./data.txt", "hey, my name is abc");
// console.log("file created");
// console.log("end");

// console.log("start");
// console.log("middle");
// fs.writeFileSync("../data.txt", "let a = 10");
// console.log("file created");
// console.log("end");

//? in writeFileSync(), if the file is not present then it will create one file with the given data,
//? if the file is present, then the contents of the file will be overwritten with the new passed data

//! create a file demo.java inside user defined folder
// now it has to be done

// fs.writeFileSync("../User Defined/demo.java", "let a =10");

//! 2) reading/ fetching a file synchronously
// method name ==> readFileSync()
// syntax ==> fs.readFileSync("path", "encoding")
//? path ==> path of the file which you want to read
//? encoding ==> the data type which we want to display

// console.log("start");
// let data = fs.readFileSync("./data.txt"); // os --> source
// console.log(data); // 10 secs console --> destination
// /* <Buffer 6c 65 74 20 61 20 3d 20
//  31 30 0d 0a 0d 0a 6d 79 20 6e
// 61 6d 65 20 69 73 20 62 6c 61 6
// 8 20 62 6c 61 68 20 62 6c 61 68
// > it is an array, if we want to convert this buffer value into a readable data */
// // buffer ==> [ 6c, 65, 74, 20......... ]
// // to convert buffer value to readable data use toString()
// // streams and buffer
// console.log(data.toString());
// console.log("file read");
// console.log("middle");
// console.log("end");

// clg("start is modified");

// let data = fs.readFileSync("./data.txt", "utf-8");
// // utf ==> unicode transformation format
// // buffer --> array of values which is not in readable format
// console.log(data);

// console.log("middle");
// console.log("end");

// let myName = "abc";
// console.log(myName); // abc
// console.log("myName"); // myName

//! 3) appending/ updating a file synchronously
// updating -->  1) add something  2) modify the existing data (this is not possible with this method)
// append --> add some data at the end of something
// method name ==> appendFileSync()
// syntax ==> fs.appendFileSync("path", "data")
//? path ==> path of the file which you want to update
//? data ==> new data to be added

// console.log("start");
// console.log("middle");

// fs.appendFileSync("./data.txt", "\n this is my added statement"); // previous contents will not be over written
// console.log("file updated/ appended");

// console.log("end");

//! deleting a file
// method name ==> unlinkSync()
// syntax ==> fs.unlinkSync("path")

// console.log("start");
// console.log("middle");

// fs.unlinkSync("./data.txt");
// console.log("file deleted");

// console.log("end");

//! ques ==> copy the contents of "fs.js" and paste it into new file "app.js" in the current folder
let payload = fs.readFileSync("./fs.js", "utf-8");
console.log(payload);
fs.writeFileSync("./app.js", payload);
console.log("file has been copied");
